"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator.throw(value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments)).next());
    });
};
const assert = require('assert');
const index_1 = require('./index');
//const hostname = 'ws.dpd.ru';
const hostname = 'wstest.dpd.ru';
const services = new index_1.DPD({
    hostname,
    clientId: 1001027847,
    secretKey: '4259A17FC7F944F17DDACA36C07129D8D62159A4'
});
(function (n) {
    return __awaiter(this, void 0, void 0, function* () {
        try {
            if (n) {
                console.log('test ' + n + ' stage');
            }
            //services.geography.getCities().data(row => console.log(row));
            if (!n || n == 1) {
                const result = yield services.geography.getCitiesCashPay({});
                assert(result[0].cityCode, 'getCitiesCashPay fails');
                console.log('getCitiesCashPay ok');
            }
            if (!n || n == 2) {
                const result = yield services.geography.getParcelShops({});
                assert(result.parcelShop[0].code, 'getParcelShops fails');
                console.log('getParcelShops ok');
            }
            if (!n || n == 3) {
                const result = yield services.geography.getTerminalsSelfDelivery2({});
                assert(result[0].terminal.terminalCode, 'getTerminalsSelfDelivery2 fails');
                console.log('getTerminalsSelfDelivery2 ok');
            }
            if (!n || n == 4) {
                const result = yield services.geography2.getParcelShops({});
                assert(result.parcelShop[0].code, 'getParcelShops fails');
                console.log('getParcelShops ok');
            }
            if (!n || n == 5) {
                const result = yield services.geography2.getStoragePeriod({ terminalCode: 'YKS' });
                assert(result.terminal[0].terminalCode, 'getStoragePeriod fails');
                console.log('getStoragePeriod ok');
            }
            if (!n || n == 6) {
                const result = yield services.geography2.getTerminalsSelfDelivery2({});
                assert(result.terminal[0].terminalCode, 'getTerminalsSelfDelivery2 fails');
                console.log('getTerminalsSelfDelivery2 ok');
            }
        }
        catch (error) {
            console.log(error.stack);
        }
    });
})(parseInt(process.argv.pop()));
//# sourceMappingURL=test-ts.js.map